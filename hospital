from tkinter import *
from tkinter import ttk
import tkinter as tk
import random
import time
import datetime
from tkinter import messagebox
import mysql.connector
import os
from tkinter import filedialog
from fpdf import FPDF

import tkinter
from tkinter import messagebox


from tkinter import *

def login():
    entered_username = username_entry.get()
    entered_password = password_entry.get()

    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="#7903664492sid",
        database="hospital_management_system"
    )

    cursor = conn.cursor()

    try:
        # Check if the entered username and password match any record in the database
        cursor.execute("SELECT * FROM signup WHERE username = %s AND password = %s", (entered_username, entered_password))
        user_record = cursor.fetchone()

        if user_record:
            messagebox.showinfo(title="Login Success", message="You successfully logged in.")
            # Here, you can open a new window or perform any other actions after successful login.
            # For example, you can create an instance of the Hospital class and pass the new window.
            new_window = Toplevel()
            app = Hospital(new_window)
        else:
            messagebox.showerror(title="Error", message="Invalid login.")

    except mysql.connector.Error as err:
        print(f"Error: {err}")
        messagebox.showerror("Database Error", "An error occurred while connecting to the database.")

    finally:
        cursor.close()
        conn.close()

def signup():
    global signup_window
    signup_window = Toplevel(window)
    signup_window.title("Signup form")
    signup_window.geometry('500x500')

    # Create widgets for signup window
    signup_label = Label(signup_window, text="Signup", font=("Arial", 30))
    signup_label.pack(pady=20)

    global Name_entry_signup
    Name_label_signup = Label(signup_window, text="Name", font=("Arial", 16))
    Name_label_signup.pack()
    Name_entry_signup = Entry(signup_window, font=("Arial", 16))
    Name_entry_signup.pack(pady=10)

    global Number_entry_signup
    Number_label_signup = Label(signup_window, text="Number", font=("Arial", 16))
    Number_label_signup.pack()
    Number_entry_signup = Entry(signup_window, font=("Arial", 16))
    Number_entry_signup.pack(pady=10)

    global username_entry_signup
    username_label_signup = Label(signup_window, text="Username", font=("Arial", 16))
    username_label_signup.pack()
    username_entry_signup = Entry(signup_window, font=("Arial", 16))
    username_entry_signup.pack(pady=10)

    global password_entry_signup
    password_label_signup = Label(signup_window, text="Password", font=("Arial", 16))
    password_label_signup.pack()
    password_entry_signup = Entry(signup_window, show="*", font=("Arial", 16))
    password_entry_signup.pack(pady=10)

        # Add a signup button to perform signup action
    signup_button = Button(signup_window, text="Signup", bg="#FF3399", fg="#ffffff", font=("Arial", 16),command=perform_signup)

    signup_button.pack(pady=20)

def perform_signup():
    Name = Name_entry_signup.get()
    Number = Number_entry_signup.get()
    Username = username_entry_signup.get()
    Password = password_entry_signup.get()

    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="#7903664492sid",
        database="hospital_management_system"
    )

    # Create a cursor object to interact with the database
    cursor = conn.cursor()

    try:
        # Check if username already exists in the "signup" table
        cursor.execute("SELECT * FROM signup WHERE username = %s", (Username,))
        existing_user = cursor.fetchone()

        if existing_user:
            messagebox.showerror("Signup Error", "Username already exists. Please choose a different username.")
        else:
            # Add the new user to the "signup" table
            cursor.execute("INSERT INTO signup (name, number, username, password) VALUES (%s, %s, %s, %s)", (Name, Number, Username, Password))

            conn.commit()

            # Display a success message
            messagebox.showinfo("Signup Success", "You have successfully signed up!")

            # Close the signup window (optional)
            signup_window.destroy()

    except mysql.connector.Error as err:
        print(f"Error: {err}")
        messagebox.showerror("Database Error", "An error occurred while connecting to the database.")

    finally:
        # Close the cursor and connection
        cursor.close()
        conn.close()



# Create the main window
window = Tk()
window.title("Login form")
window.geometry('500x500')
window.configure(bg='#333333')

# Create widgets for the main window
frame = Frame(bg='#333333')

login_label = Label(frame, text="Login", bg='#333333', fg="#FF3399", font=("Arial", 30))
username_label = Label(frame, text="Username", bg='#333333', fg="#FFFFFF", font=("Arial", 16))
username_entry = Entry(frame, font=("Arial", 16))
password_entry = Entry(frame, show="*", font=("Arial", 16))
password_label = Label(frame, text="Password", bg='#333333', fg="#FFFFFF", font=("Arial", 16))
login_button = Button(frame, text="Login", bg="#FF3399", fg="#FFFFFF", font=("Arial", 16), command=login)
signup_button = Button(frame, text="Signup", bg="#3333FF", fg="#FFFFFF", font=("Arial", 16), command=signup)

login_label.grid(row=0, column=0, columnspan=2, sticky="news", pady=40)
username_label.grid(row=1, column=0)
username_entry.grid(row=1, column=1, pady=20)
password_label.grid(row=2, column=0)
password_entry.grid(row=2, column=1, pady=20)
login_button.grid(row=3, column=0, columnspan=2, pady=10)
signup_button.grid(row=4, column=0, columnspan=2, pady=10)

frame.pack()


# window.mainloop()




class Hospital:
    def __init__(self,root):
        self.root=root
        self.root.title("Hospital management system")
        self.root.geometry("1540x800+0+0")

        self.Nameoftablets = StringVar()
        self.ref = StringVar()
        self.Dose = StringVar()
        self.Numberoftablets = StringVar()
        self.Lot = StringVar()
        self.Issuedate = StringVar()
        self.ExpDate = StringVar()
        self.DailyDose = StringVar()
        self.sideEfect = StringVar()
        self.FurtherInformation = StringVar()
        self.storage = StringVar()
        self.Medicine = StringVar()
        self.PatientId = StringVar()
        self.nhsnumber = StringVar()
        self.Patientname = StringVar()
        self.Dateofbirth = StringVar()
        self.PatientAddress = StringVar()
        self.bloodpressure = StringVar()



        lbtitle=Label(self.root,bd=20,relief=RIDGE,text="Hospital management system",fg="red",bg="white",font=("times new roman",50,"bold"))
        lbtitle.pack(side=TOP, fill="x")

         #=====================================dataframe====================
        Dataframe = Frame(self.root, bd=20, relief=RIDGE)
        Dataframe.place(x=0, y=130, width=1530, height=400)


        DataframeLeft = LabelFrame(Dataframe, bd=10, relief=RIDGE, padx=10,
                                     font=("times new roman", 12, "bold"), text="Patient Information")
        DataframeLeft.place(x=0, y=5, width=980, height=350)

        DataframeRight = LabelFrame(Dataframe, bd=10, relief=RIDGE, padx=10,
                                      font=("times new roman", 12, "bold"), text="Prescription")
        DataframeRight.place(x=990,y=5,width=460,height=350)

        # =========================button frame================================
        ButtonFrame=Frame(self.root,bd=20,relief=RIDGE)
        ButtonFrame.place(x=0,y=530,width=1530,height=70)

        # =======================details frame =================================

        DetailsFrame = Frame(self.root, bd=20, relief=RIDGE)
        DetailsFrame.place(x=0, y=600, width=1530, height=190)

        # =======================dataframeleft =================================

        lb1Nametablet=Label(DataframeLeft,text="Names of tablet",font=("times of roman",12,"bold"),padx=2,pady=6)
        lb1Nametablet.grid(row=0,column=0)

        comNametablet=ttk.Combobox(DataframeLeft,textvariable=self.Nameoftablets,font=("times of roman",12,"bold"),width=33)
        comNametablet["values"]=("nice","corona vaccine","acetaminophen","adderall","amlodipine","ativan")
        comNametablet.grid(row=0,column=1)

        lb1ref = Label(DataframeLeft, text="Refrence No", font=("arial", 12, "bold"), padx=2)
        lb1ref.grid(row=1, column=0,sticky=W)
        txtref=Entry(DataframeLeft,textvariable=self.ref,font=("arial",13,"bold"),width=35)
        txtref.grid(row=1,column=1)

        lb1Dose = Label(DataframeLeft, text="DOSE:", font=("arial", 12, "bold"), padx=2)
        lb1Dose.grid(row=2, column=0, sticky=W)
        txtDose = Entry(DataframeLeft,textvariable=self.Dose ,font=("arial", 13, "bold"), width=35)
        txtDose.grid(row=2, column=1)

        lb1Nooftablets = Label(DataframeLeft, text="Number of Tablets", font=("arial", 12, "bold"), padx=2)
        lb1Nooftablets.grid(row=3, column=0, sticky=W)
        txtNooftablets = Entry(DataframeLeft, textvariable=self.Numberoftablets,font=("arial", 13, "bold"), width=35)
        txtNooftablets.grid(row=3, column=1)

        lb1lot = Label(DataframeLeft, text="LOT:", font=("arial", 12, "bold"), padx=2)
        lb1lot.grid(row=4, column=0, sticky=W)
        txtlot = Entry(DataframeLeft,textvariable=self.Lot, font=("arial", 13, "bold"), width=35)
        txtlot.grid(row=4, column=1)

        lb1issuedate = Label(DataframeLeft, text="Issue Date:", font=("arial", 12, "bold"), padx=2)
        lb1issuedate.grid(row=5, column=0, sticky=W)
        txtissuedate = Entry(DataframeLeft,textvariable=self.Issuedate,font=("arial", 13, "bold"), width=35)
        txtissuedate.grid(row=5, column=1)

        lb1expdate = Label(DataframeLeft, text="Exp Date:", font=("arial", 12, "bold"), padx=2)
        lb1expdate.grid(row=6, column=0, sticky=W)
        txtexpdate = Entry(DataframeLeft,textvariable=self.ExpDate, font=("arial", 13, "bold"), width=35)
        txtexpdate.grid(row=6, column=1)

        lb1dailydose = Label(DataframeLeft, text="Daily Dose", font=("arial", 12, "bold"), padx=2)
        lb1dailydose.grid(row=7, column=0, sticky=W)
        txtDose = Entry(DataframeLeft,textvariable=self.DailyDose, font=("arial", 13, "bold"), width=35)
        txtDose.grid(row=7, column=1)


        lb1sideEffect = Label(DataframeLeft, text="Side Effect", font=("arial", 12, "bold"), padx=2)
        lb1sideEffect.grid(row=8, column=0, sticky=W)
        txtsideEffect = Entry(DataframeLeft, textvariable=self.sideEfect,font=("arial", 13, "bold"), width=35)
        txtsideEffect.grid(row=8, column=1)

        lb1futherinfo = Label(DataframeLeft, text="Further Info:", font=("arial", 12, "bold"), padx=2)
        lb1futherinfo.grid(row=0, column=2, sticky=W)
        txtfurtherinfo = Entry(DataframeLeft,textvariable=self.FurtherInformation, font=("arial", 13, "bold"), width=35)
        txtfurtherinfo.grid(row=0, column=3)

        lb1bloodpressure = Label(DataframeLeft, text="Blood Presuure", font=("arial", 12, "bold"), padx=2)
        lb1bloodpressure.grid(row=1, column=2, sticky=W)
        txtbloodpressure = Entry(DataframeLeft,textvariable=self.bloodpressure ,font=("arial", 13, "bold"), width=35)
        txtbloodpressure.grid(row=1, column=3)

        lb1storage = Label(DataframeLeft, text="Storage", font=("arial", 12, "bold"), padx=2)
        lb1storage.grid(row=2, column=2, sticky=W)
        txtstorage = Entry(DataframeLeft,textvariable=self.storage, font=("arial", 13, "bold"), width=35)
        txtstorage.grid(row=2, column=3)

        lb1Medication = Label(DataframeLeft, text="Medication", font=("arial", 12, "bold"), padx=2)
        lb1Medication.grid(row=3, column=2, sticky=W)
        txtMedication = Entry(DataframeLeft,textvariable=self.Medicine, font=("arial", 13, "bold"), width=35)
        txtMedication.grid(row=3, column=3)

        lb1patientId = Label(DataframeLeft, text="Patient Id ", font=("arial", 12, "bold"), padx=2)
        lb1patientId.grid(row=4, column=2, sticky=W)
        txtpatientId = Entry(DataframeLeft, textvariable=self.PatientId,font=("arial", 13, "bold"), width=35)
        txtpatientId.grid(row=4, column=3)

        lb1NHSNumber = Label(DataframeLeft, text="NHS Number", font=("arial", 12, "bold"), padx=2)
        lb1NHSNumber.grid(row=5, column=2, sticky=W)
        txtNHSNumber = Entry(DataframeLeft,textvariable=self.nhsnumber, font=("arial", 13, "bold"), width=35)
        txtNHSNumber.grid(row=5, column=3)

        lb1patientName = Label(DataframeLeft, text="Patient Name", font=("arial", 12, "bold"), padx=2)
        lb1patientName.grid(row=6, column=2, sticky=W)
        txtpatientName = Entry(DataframeLeft,textvariable=self.Patientname, font=("arial", 13, "bold"), width=35)
        txtpatientName.grid(row=6, column=3)

        lb1DateofBirth = Label(DataframeLeft, text="Date of Birth", font=("arial", 12, "bold"), padx=2)
        lb1DateofBirth.grid(row=7, column=2, sticky=W)
        txtDateofBirth = Entry(DataframeLeft,textvariable=self.Dateofbirth, font=("arial", 13, "bold"), width=35)
        txtDateofBirth.grid(row=7, column=3)

        lb1patientAddress = Label(DataframeLeft, text="Patient Address", font=("arial", 12, "bold"), padx=2)
        lb1patientAddress.grid(row=8, column=2, sticky=W)
        txtpatientAddress = Entry(DataframeLeft,textvariable=self.PatientAddress, font=("arial", 13, "bold"), width=35)
        txtpatientAddress.grid(row=8, column=3)

        # =================================DataframeLeft========================

        self.txtPrescription = Text(DataframeRight, font=("arial", 12, "bold"), width=55, height=21, padx=2, pady=6)
        self.txtPrescription.grid(row=0, column=0)

         # ニニニニニニニニニニニニニニニニニニニニニニニニニbuttonニニニニニニニニニニニニニ

        btnPrescription=Button(ButtonFrame,command=self.iPrecticption,text="Pescription",bg="green",fg="black",font=("arial",12,"bold"),
                               width=23,padx=2,pady=6)
        btnPrescription.grid(row=0,column=0)

        btnPrescriptionData = Button(ButtonFrame,command=self.iPrescriptionData, text="Pescription Data", bg="green", fg="black", font=("arial", 12, "bold"),
                                 width=23, padx=2, pady=6)
        btnPrescriptionData.grid(row=0, column=1)

        btnUpdate = Button(ButtonFrame,command=self.update, text="Update", bg="green", fg="black", font=("arial", 12, "bold"),
                                 width=23, padx=2, pady=6)
        btnUpdate.grid(row=0, column=3)

        btnDelete = Button(ButtonFrame,command=self.iDelete, text="Delete", bg="green", fg="black", font=("arial", 12, "bold"),
                                 width=24, padx=2, pady=6)
        btnDelete.grid(row=0, column=4)

        btnClear = Button(ButtonFrame,command=self.iclear, text="Clear", bg="green", fg="black", font=("arial", 12, "bold"),
                                 width=24, padx=2, pady=6)
        btnClear.grid(row=0, column=5)

        btnPrint = Button(ButtonFrame,command=self.iPrint ,text="Print", bg="green", fg="black",font=("arial", 12, "bold"),
                          width=24, padx=2, pady=6)
        btnPrint.grid(row=0, column=6)

        btnExit = Button(ButtonFrame,command=self.iExit, text="Exit", bg="green", fg="black", font=("arial", 12, "bold"),
                                 width=24, padx=2, pady=6)
        btnExit.grid(row=0, column=7)


        # =========================Table=========================================
        # ===========================scrollbar=====================================
        scroll_x=ttk.Scrollbar(DetailsFrame,orient=HORIZONTAL)
        scroll_y=ttk.Scrollbar(DetailsFrame,orient=VERTICAL)
        self.hospital_table=ttk.Treeview(DetailsFrame,columns=("nameoftable", "ref", "dose", "nooftablets", "lot",
                 "issuedate","expdate", "dailydose", "storage", "nhsnumber", "pname" ,"dob", "address"),xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM,fill="x")
        scroll_y.pack(side=BOTTOM, fill="y")

        scroll_x = ttk.Scrollbar(command=self.hospital_table.xview)
        scroll_y = ttk.Scrollbar(command=self.hospital_table.yview)

        self.hospital_table.heading("nameoftable",text="Name of Tablet")
        self.hospital_table.heading("ref", text="Reference No.")
        self.hospital_table.heading("dose", text="Dose")
        self.hospital_table.heading("nooftablets", text="No of Tablets")
        self.hospital_table.heading("lot", text="Lot")
        self.hospital_table.heading("issuedate", text="Issue Date")
        self.hospital_table.heading("expdate", text="Exp Date")
        self.hospital_table.heading("dailydose", text="Daily Dose")
        self.hospital_table.heading("storage", text="Storage")
        self.hospital_table.heading("nhsnumber", text="NHS Number")
        self.hospital_table.heading("pname", text="Patient Name")
        self.hospital_table.heading("dob", text="DOB")
        self.hospital_table.heading("address", text="Address")

        self.hospital_table["show"]="headings"
        self.hospital_table.pack(fill=BOTH, expand=1)
        self.hospital_table.bind("<ButtonRelease-1>",self.get_cursor)
        self.fetch_data()

        self.hospital_table.column("nameoftable",width=90)
        self.hospital_table.column("ref", width=90)
        self.hospital_table.column("dose", width=90)
        self.hospital_table.column("nooftablets", width=90)
        self.hospital_table.column("lot", width=90)
        self.hospital_table.column("issuedate", width=90)
        self.hospital_table.column("expdate", width=90)
        self.hospital_table.column("dailydose", width=90)
        self.hospital_table.column("storage", width=90)
        self.hospital_table.column("nhsnumber", width=90)
        self.hospital_table.column("pname", width=90)
        self.hospital_table.column("dob", width=90)
        self.hospital_table.column("address", width=90)

        # =======================functionality declration===========================

    def iPrescriptionData(self):
        if self.Nameoftablets.get()=="" or self.ref.get()=="":
                messagebox.showerror("Error","All Feild are required")
        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="#7903664492sid",database="hospital_management_system")
            my_cursor=conn.cursor()
            my_cursor.execute("insert into hospital values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(
                  self.Nameoftablets.get(),
                  self.ref.get(),
                  self.Dose.get(),
                  self.Numberoftablets.get(),
                  self.Lot.get(),
                  self.Issuedate.get(),
                  self.ExpDate.get(),
                  self.DailyDose.get(),
                  self.sideEfect.get(),
                  self.FurtherInformation.get(),
                  self.bloodpressure.get(),
                  self.storage.get(),
                  self.Medicine.get(),
                  self.PatientId.get(),
                  self.nhsnumber.get(),
                  self.Patientname.get(),
                  self.Dateofbirth.get(),
                  self.PatientAddress.get()
                                             ))
            conn.commit()
            self.fetch_data()
            conn.close()
            messagebox.showinfo("Success","Data bas been added")

    #  update
    def update(self):
        conn = mysql.connector.connect(host="localhost", username="root", password="#7903664492sid",
                                       database="hospital_management_system")
        my_cursor = conn.cursor()
        my_cursor.execute("""
            UPDATE hospital
            SET Nameoftablets=%s, Dose=%s, Numberoftablets=%s, Lot=%s, Issuedate=%s, ExpDate=%s, DailyDose=%s,
                sideEffect=%s, FurtherInformation=%s, bloodpressure=%s, storage=%s, Medicine=%s,
                Patientid=%s, nhsnumber=%s, Patientname=%s, dateofbirth=%s, Patientaddress=%s
            WHERE ref=%s
        """, (
            self.Nameoftablets.get(), self.Dose.get(), self.Numberoftablets.get(), self.Lot.get(),
            self.Issuedate.get(), self.ExpDate.get(), self.DailyDose.get(), self.sideEfect.get(),
            self.FurtherInformation.get(), self.bloodpressure.get(), self.storage.get(), self.Medicine.get(),
            self.PatientId.get(), self.nhsnumber.get(), self.Patientname.get(), self.Dateofbirth.get(),
            self.PatientAddress.get(), self.ref.get()
        ))
        conn.commit()
        conn.close()
        self.fetch_data()

    def fetch_data(self):
        conn = mysql.connector.connect(host="localhost", username="root", password="#7903664492sid",
                                       database="hospital_management_system")
        my_cursor = conn.cursor()
        my_cursor.execute("select * from hospital")
        rows=my_cursor.fetchall()
        if len(rows)!=0:
            self.hospital_table.delete(*self.hospital_table.get_children())
            for i in rows:
                self.hospital_table.insert("",END,values=i)
            conn.commit()
        conn.close()

    def get_cursor(self, event=""):
        cursor_row = self.hospital_table.focus()
        content = self.hospital_table.item(cursor_row)
        row = content["values"]

        self.Nameoftablets.set(row[0])
        self.ref.set(row[1])
        self.Dose.set(row[2])
        self.Numberoftablets.set(row[3])
        self.Lot.set(row[4])
        self.Issuedate.set(row[5])
        self.ExpDate.set(row[6])
        self.DailyDose.set(row[7])
        self.sideEfect.set(row[8])
        self.FurtherInformation.set(row[9])
        self.bloodpressure.set(row[10])
        self.storage.set(row[11])
        self.Medicine.set(row[12])
        self.PatientId.set(row[13])
        self.nhsnumber.set(row[14])
        self.Patientname.set(row[15])
        self.Dateofbirth.set(row[16])
        self.PatientAddress.set(row[17])

    def iPrecticption(self):
        self.txtPrescription.insert(END, "Name of Tablets:\t\t\t" + self.Nameoftablets.get() + "\n")
        self.txtPrescription.insert(END, "Reference No:\t\t\t" + self.ref.get() + "\n")
        self.txtPrescription.insert(END, "Dose:\t\t\t" + self.Dose.get() + "\n")
        self.txtPrescription.insert(END, "Number Of Tablets:\t\t\t" + self.Numberoftablets.get() + "\n")
        self.txtPrescription.insert(END, "Lot:\t\t\t" + self.Lot.get() + "\n")
        self.txtPrescription.insert(END, "Issue Date:\t\t\t" + self.Issuedate.get() + "\n")
        self.txtPrescription.insert(END, "Exp date:\t\t\t" + self.ExpDate.get() + "\n")
        self.txtPrescription.insert(END, "daily Dose:\t\t\t" + self.DailyDose.get() + "\n")
        self.txtPrescription.insert(END, "Side Effect:\t\t\t" + self.sideEfect.get() + "\n")
        self.txtPrescription.insert(END, "Further Information:\t\t\t" + self.FurtherInformation.get() + "\n")
        self.txtPrescription.insert(END, "Storage:\t\t\t" + self.storage.get() + "\n")
        self.txtPrescription.insert(END, "Medicine:\t\t\t" + self.Medicine.get() + "\n")
        self.txtPrescription.insert(END, "PatientId:\t\t\t" + self.PatientId.get() + "\n")
        self.txtPrescription.insert(END, "NHSNumber: \t\t\t" + self.nhsnumber.get() + "\n")
        self.txtPrescription.insert(END, "PatientName:\t\t\t" + self.Patientname.get() + "\n")

        self.txtPrescription.insert(END, "DateOfBirth:\t\t\t" + self.Dateofbirth.get() + "\n")
        self.txtPrescription.insert(END, "PatientAddress:\t\t\t" + self.PatientAddress.get() +"\n" )

    def iDelete(self):
        conn = mysql.connector.connect(host='localhost', username='root', password='#7903664492sid', database='hospital_management_system')
        my_cursor = conn.cursor()
        query = "delete from hospital where ref=%s"
        value = (self.ref.get(),)
        my_cursor.execute(query, value)
        conn.commit()
        conn.close()
        self.fetch_data()
        messagebox.showinfo("Delete", "Patient has been deleted")

    def iclear (self):
        self.Nameoftablets.set("")
        self.ref.set("")
        self.Dose.set("")
        self.Numberoftablets.set("")
        self.Lot.set("")
        self.Issuedate.set("")
        self.ExpDate.set("")
        self.DailyDose.set("")
        self.sideEfect.set("")
        self.FurtherInformation.set("")
        self.storage.set("")
        self.Medicine.set("")
        self.PatientId.set("")
        self.nhsnumber.set("")
        self.Patientname.set("")
        self.Dateofbirth.set("")
        self.PatientAddress.set("")
        self.txtPrescription.delete("1.0",END)

    def iExit(self):
        iExit = messagebox.askyesno("Hospital managemnt system", "Confirm you want to exit")
        if iExit > 0:
               self.root.destroy()
        return

    from tkinter import filedialog
    from fpdf import FPDF

    # ...

    def iPrint(self):
        try:
            file_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
            if file_path:
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                pdf.multi_cell(0, 10, self.txtPrescription.get("1.0", END))
                pdf.output(file_path)
                os.startfile(file_path, 'print')
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")





 # root=Tk()
 # ob=Hospital(root)
window.mainloop()




